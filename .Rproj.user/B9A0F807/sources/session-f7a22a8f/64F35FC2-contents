#' @title Format CNV annotation result
#' @param result_path Path of Annovar result.
#' @param db_path Path of database directory.
#' @export
#' @import IRanges
#' @import GenomicRanges
#' @import S4Vectors
#' @import GenomeInfoDb
#' @importFrom utils read.table
#' @importFrom GenomicRanges trim
format_change <- function(result_path, db_path) {
    df <- read.table(result_path, header = TRUE, sep = "\t", quote = "",
                     comment.char = "#", na.strings = "NA",
                     fill = TRUE, stringsAsFactors = FALSE, fileEncoding='gbk')

    # database to gr
    gr_center <- read_db_file("centromere_telomere", db_path, p=2)
    gr_pop_cnv <- read_db_file("GenokonPopCNV", db_path, header=TRUE)
    gr_clingen <- read_db_file("ClinGen_Pathogenic_CNV_regions", db_path, header=TRUE)
    gr_dec_hot <- read_db_file("DEChotCNV", db_path, p=2)
    gr_except <- read_db_file("ExceptList_CNV", db_path)

    # format
    out_lst <- lapply(1:nrow(df), function(xx) {
        tokens <- df[xx,]
        tokens <- gsub("Name=", "", tokens)
        svtype <- tokens[length(tokens) - 5]
        svtype <- gsub("<", "", svtype)
        svtype <- gsub(">", "", svtype)
        cn_info <- unlist(strsplit(tokens[length(tokens)], ":"))
        cn_info2 <- unlist(strsplit(tokens[length(tokens)-2], ";"))
        cnvsize <- gsub("SVLEN=", "", cn_info2[grepl("SVLEN", cn_info2)])
        probes <- gsub("PROBES=", "", cn_info2[grepl("PROBES", cn_info2)])
        predicts <- gsub("PREDICT=", "", cn_info2[grepl("PREDICT", cn_info2)])
        fold_change_log <- gsub("FOLD_CHANGE_LOG=", "", cn_info2[grepl("FOLD_CHANGE_LOG", cn_info2)])
        cn <- cn_info[length(cn_info)]

        # anno overlap
        chr <- tokens[1]
        start <- as.integer(tokens[2])
        end <- as.integer(gsub("END=", "", cn_info2[grepl("END", cn_info2)]))
        gr <- GRanges(Rle(chr), IRanges(start=start, end=end), seqinfo=hg19_seqinfo)

        # re-annotate cytoband
        hit_gr <- subsetByOverlaps(hg19_cytoBand, gr)
        if (length(hit_gr) == 0) {
            recyto <- "."
        } else {
            recyto <- paste(unique(c(mcols(hit_gr[1])$cytoband, mcols(hit_gr[length(hit_gr)])$cytoband)), collapse = "-")
        }

        # centromere and telomere flag
        df_bad_cyto <- calculate_overlap_ratio(gr, gr_center, size=500000)
        df_bad_pop <- calculate_overlap_ratio(gr, gr_pop_cnv)
        cyto_flag <- c()
        if (!is.null(df_bad_cyto)) {
            idx <- which(df_bad_cyto[,1] >= 0.5 & df_bad_cyto[,2] >= 0.5)
            if (length(idx) > 0) {
                cyto_flag <- c(cyto_flag, unique(df_bad_cyto[idx,3]))
            }
        }

        if (!is.null(df_bad_pop)) {
            idx <- which(df_bad_pop[,3] == svtype & df_bad_pop[,1] >= 0.5)
            if (length(idx) > 0) {
                cyto_flag <- c(cyto_flag, "population")
            }
        }
        cyto_flag <- paste(cyto_flag, collapse=",")
        if (cyto_flag == "") cyto_flag <- "."

        # annotate clingen cnv
        df_clingen <- calculate_overlap_ratio(gr, gr_clingen)
        if (! is.null(df_clingen)) {
            df_clingen <- df_clingen[with(df_clingen, order(df_clingen$subject_ratio, decreasing = TRUE)), ]
            clin_cnv <- paste(paste0(df_clingen[, 3], ", ratio=", round(df_clingen[, 2],2), ", HI=", df_clingen[, 4], ", TS=", df_clingen[, 5]), collapse = ";")
            max_ratio <- df_clingen[1, 2]
            max_region <- df_clingen[1, 3]
            max_id <- df_clingen[1, 6]
        } else {
            clin_cnv <- "."
            max_ratio <- -1
            max_region <- "."
            max_id <- "."
        }

        # annotate decipher
        df_decipher <- calculate_overlap_ratio(gr, gr_dec_hot)
        if (!is.null(df_decipher)) {
            df_decipher <- df_decipher[with(df_decipher, order(df_decipher$query_ratio, df_decipher$subject_ratio, decreasing = TRUE)), ]
            idx <- which(df_decipher$query_ratio >= 0.9 & df_decipher$subject_ratio >= 0.5)
            if (length(idx) > 0) {
                if (length(idx) > 5) idx <- idx[1:5]
                decipher_cnv <- paste(paste0("(qratio=", df_decipher[idx, "query_ratio"], ", sratio=", df_decipher[idx, "subject_ratio"], ")", df_decipher[idx, 3]), collapse = ";")

            } else {
                decipher_cnv <- "."
            }
        } else {
            decipher_cnv <- "."
        }

        # annotate exception cnv list for acmg class
        df_except <- calculate_overlap_ratio(gr, gr_except)
        if (!is.null(df_except)) {
            idx <- which(df_except[,3] == svtype & df_except$query_ratio >= 0.5)
            if (length(idx) > 0) {
                df_except_s <- table(df_except[idx, 4])
                exception_cnv_class <- paste(paste(names(df_except_s), df_except_s, sep="/"), collapse=";")
            } else {
                exception_cnv_class <- "."
            }
        } else {
            exception_cnv_class <- "."
        }

        # color
        color <- "black"
        if (as.integer(cnvsize) >= 5000000 & predicts == "1") color <- "red"
        if (as.integer(cnvsize) >= 1000000 & as.integer(cnvsize) < 5000000 & predicts == "1") color <- "blue"

        # gene count
        gene_idx <- grep("Gene.refGene", names(df))
        pli_idx <- grep("gnomad_pLI", names(df))
        if (tokens[gene_idx] != ".") {
            all_genes <- unique(sort(unlist(strsplit(tokens[gene_idx], ";"))))
            hit_pli_genes <- c()
            if (tokens[pli_idx] != ".") {
                pli_genes <- unlist(strsplit(tokens[pli_idx], ","))
                for (g in pli_genes) {
                    g_name <- gsub("=.*", "", g)
                    score <- gsub(".*=", "", g)
                    if (g_name %in% all_genes) {
                        if (score != "NA") {
                            if (as.numeric(score) >= 0.9) {
                                hit_pli_genes <- c(hit_pli_genes, g_name)
                            }
                        }
                    }
                }
            }
            pli_gene_count <- length(hit_pli_genes)
            if (pli_gene_count > 0) {
                pli_gene <- paste(hit_pli_genes, collapse = ";")
            } else {
                pli_gene <- "."
            }
            new_genes <- paste(all_genes, collapse = ";")
            gene_count <- length(all_genes)
        } else {
            new_genes <- "."
            gene_count <- 0
        }

        # hgvs
        hgvs <- paste0("seq[GRCh37]", tolower(svtype), "(", chr, ")(", recyto, ")chr", chr, ":g.", start,"_", end, tolower(svtype))

        # output
        out <- data.frame(matrix(data=c(chr, start, end, cnvsize, svtype, recyto, cyto_flag, cn, probes, new_genes, gene_count, tokens[grep("ClinGenHI", names(df))], tokens[grep("ClinGenTS", names(df))], pli_gene, max_ratio, max_region, max_id, clin_cnv, tokens[grep("omimPheno", names(df))], tokens[grep("hpo_20180828", names(df))], tokens[grep("pseudogene", names(df))], decipher_cnv, color, predicts, pli_gene_count, hgvs, exception_cnv_class, tokens[grep("gnomad_zScore", names(df))], tokens[grep("morbidGene", names(df))], tokens[grep("codingGene", names(df))]), nrow=1))
        colnames(out) <- c("Chr", "Start", "End", "SVSize", "SVType", "CytoBand", "Flag", "CopyNum", "Probes", "Gene", "GeneCount", "HI", "TS", "pLI", "MaxRate", "MaxRegion", "MaxId", "ClinCNV", "OMIM", "HPO", "pseudo", "Decipher", "color", "predict", "pli_counts", "HGVS", "Exception", "Zscore", "MorbidGene", "CodingGene")
        return(out)
    })
    out_df <- do.call("rbind", out_lst)
    return(out_df)
}
